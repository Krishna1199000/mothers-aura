// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------
// Common Enums
// -------------

enum Role {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

// Chat system enums
enum AdminStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum SenderType {
  ADMIN
  CUSTOMER
}

enum ChatStatus {
  ACTIVE
  CLOSED
  PENDING
}

enum TaskType {
  EMPLOYEE
  CUSTOMER
  BOTH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// -----------------
// NextAuth.js models
// -----------------

model User {
  id             String   @id @default(uuid())
  name           String?
  email          String   @unique
  phone          String?
  password       String?
  image          String?
  role           Role     @default(CUSTOMER)
  emailVerified  DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Chat-related fields
  adminStatus    AdminStatus  @default(OFFLINE)
  lastActive     DateTime?

  accounts       Account[]
  sessions       Session[]

  // Relations to created records
  createdInvoices Invoice[] @relation("InvoiceCreatedBy")
  createdMemos    Memo[]    @relation("MemoCreatedBy")
  createdLedger   Ledger[]  @relation("LedgerCreatedBy")
  createdReports  PerformanceReport[] @relation("PerformanceReportCreatedBy")
  createdMasters  Master[]  @relation("MasterCreatedBy")
  createdInventory Inventory[] @relation("InventoryCreatedBy")

  // Chat relations
  chats         Chat[]       @relation("AdminChats")
  messages      Message[]    @relation("AdminMessages")
  chatRequests  ChatRequest[] @relation("AdminChatRequests")

  // Task and Notification relations
  createdTasks    Task[]           @relation("TaskCreatedBy")
  taskAssignments TaskAssignment[]
  notifications   Notification[]

  // Cart, Order, and Wishlist relations
  cart      Cart?
  orders    Order[]
  wishlist  WishlistItem[]

  // Site announcements created by this user
  createdAnnouncements SiteAnnouncement[] @relation("SiteAnnouncementCreatedBy")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -----------------
// Business models
// -----------------

model Master {
  id                 String    @id @default(uuid())
  companyName        String
  ownerName          String?
  addressLine1       String?
  addressLine2       String?
  country            String?
  state              String?
  city               String?
  postalCode         String?
  phoneNo            String?
  faxNo              String?
  email              String?
  website            String?
  paymentTerms       String?
  shippedBy          String?
  organizationType   String?
  businessType       String?
  businessRegNo      String?
  panNo              String?
  sellerPermitNo     String?
  cstTinNo           String?
  tradeBodyMembership String?
  referenceType      String?
  notes              String?
  authorizedById     String?
  accountManagerId   String?
  brokerName         String?
  partyGroup         String?
  salesExecutiveId   String?
  leadSourceId       String?
  limit              Float?
  createdById        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  references Reference[]
  invoices   Invoice[]
  memos      Memo[]
  ledger     Ledger[]
  createdBy  User?    @relation("MasterCreatedBy", fields: [createdById], references: [id])
}

model Reference {
  id           String  @id @default(uuid())
  masterId     String
  companyName  String
  contactPerson String
  contactNo    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  master Master @relation(fields: [masterId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String    @id @default(uuid())
  invoiceNumber String    @unique  // Format: MA-0001A/date
  sequenceNum   Int       @default(autoincrement())  // Auto-increment number
  date          DateTime?
  dueDate       DateTime?
  paymentTerms  String?   // Format: "7 days", "30 days", etc
  emailPdf      Boolean?  @default(false)
  masterId      String
  description   String?
  shipmentCost  Float?    @default(0)
  discount      Float?    @default(0)
  crPayment     Float?    @default(0)
  subtotal      Float?    @default(0)
  totalDue      Float?    @default(0)
  createdById   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  master   Master  @relation(fields: [masterId], references: [id], onDelete: Cascade)
  createdBy User?   @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  items    InvoiceItem[]
  ledger   Ledger[]
}

model InvoiceItem {
  id             String   @id @default(uuid())
  invoiceId      String
  description    String
  carat          Float
  color          String?
  clarity        String?
  lab            String?
  reportNo       String?
  pricePerCarat  Float
  total          Float

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Memo {
  id           String    @id @default(uuid())
  memoNumber   String    @unique  // Format: MAM-0001A/date
  sequenceNum  Int       @default(autoincrement())  // Auto-increment number
  date         DateTime?
  dueDate      DateTime?
  paymentTerms String?   // Format: "7 days", "30 days", etc
  emailPdf     Boolean?  @default(false)
  masterId     String
  description  String?
  shipmentCost Float?    @default(0)
  discount     Float?    @default(0)
  crPayment    Float?    @default(0)
  subtotal     Float?    @default(0)
  totalDue     Float?    @default(0)
  createdById  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  master   Master @relation(fields: [masterId], references: [id], onDelete: Cascade)
  createdBy User?  @relation("MemoCreatedBy", fields: [createdById], references: [id])
  items    MemoItem[]
}

model MemoItem {
  id            String  @id @default(uuid())
  memoId        String
  description   String
  carat         Float
  color         String?
  clarity       String?
  lab           String?
  reportNo      String?
  pricePerCarat Float
  total         Float

  memo Memo @relation(fields: [memoId], references: [id], onDelete: Cascade)
}

model ParcelGoods {
  id          String   @id @default(uuid())
  sieveSize   Int?
  price       Float?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Inventory {
  id              String   @id @default(uuid())
  stockId         String   @unique
  heldByCompany   String?
  status          String   // AVAILABLE, HOLD, MEMO, SOLD
  shape           String
  carat           Float
  color           String
  clarity         String
  cut             String?
  polish          String
  symmetry        String
  certificateNo   String?
  lab             String
  askingAmount    Float    // Customer-facing price
  greenAmount     Float    // Employee & Admin price
  redAmount       Float    // Employee & Admin price
  superRedAmount  Float    // Admin-only price
  imageUrl        String?
  videoUrl        String?
  certificateUrl  String?
  measurement     String?
  location        String?
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy       User     @relation("InventoryCreatedBy", fields: [createdById], references: [id])
  history         InventoryHistory[]
}

// Tracks chronological events for each inventory stone (import, hold, memo, sold, returns, etc.)
model InventoryHistory {
  id            String   @id @default(uuid())
  inventoryId   String
  stockId       String
  operation     String   // IMPORT, HOLD, HOLD_RETURN, MEMO, MEMO_RETURN, SOLD, etc.
  referenceNo   String?
  date          DateTime @default(now())
  lotNo         String?
  lotLocation   String?
  createdName   String?
  companyName   String?
  active        Boolean?
  closed        Boolean?
  wgt           Float?
  rate          Float?
  discount      Float?
  createdAt     DateTime @default(now())

  inventory     Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId])
  @@index([stockId])
}

model PerformanceReport {
  id                  String   @id @default(uuid())
  date                DateTime
  totalCalls          Int
  totalEmails         Int
  requirementReceived Int
  memoNumber          String?
  invoiceNumber       String?
  notes               String?
  createdById         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  createdBy User @relation("PerformanceReportCreatedBy", fields: [createdById], references: [id])
}

model Ledger {
  id          String   @id @default(uuid())
  date        DateTime
  type        String   // CREDIT or DEBIT
  amount      Float
  description String
  invoiceId   String?
  masterId    String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  master    Master   @relation(fields: [masterId], references: [id])
  createdBy User     @relation("LedgerCreatedBy", fields: [createdById], references: [id])
}

// -----------------
// Chat system models
// -----------------

model Chat {
  id          String      @id @default(uuid())
  status      ChatStatus  @default(ACTIVE)
  adminId     String
  customerId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  admin       User        @relation("AdminChats", fields: [adminId], references: [id])
  messages    Message[]
  
  // Customer info (for non-registered customers)
  customerName  String?
  customerEmail String?

  // Metadata
  lastMessageAt DateTime  @default(now())
  isAdminTyping Boolean   @default(false)
  isCustomerTyping Boolean @default(false)
}

model Message {
  id          String      @id @default(uuid())
  chatId      String
  content     String      @db.Text
  senderType  SenderType
  senderId    String?
  createdAt   DateTime    @default(now())
  
  // Relations
  chat        Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User?       @relation("AdminMessages", fields: [senderId], references: [id])
  
  // Read status
  isRead      Boolean     @default(false)
  readAt      DateTime?
}

model ChatRequest {
  id          String    @id @default(uuid())
  name        String
  email       String
  message     String    @db.Text
  createdAt   DateTime  @default(now())
  status      String    @default("PENDING") // PENDING, ACCEPTED, REJECTED
  
  // Admin who handled the request
  adminId     String?
  admin       User?     @relation("AdminChatRequests", fields: [adminId], references: [id])
  
  // If chat was created from this request
  chatId      String?
  
  // Metadata
  ipAddress   String?
  userAgent   String?
  source      String?   // Where the request came from (e.g., "chat_widget", "contact_form")
}

// Kyrah and Cranberri models removed

// -----------------
// UI Inventory models
// -----------------

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}


model Product {
  id              String    @id @default(uuid())
  name            String
  slug            String    @unique
  description     String?
  price           Float?    // Deprecated - Use priceUSD etc instead
  priceUSD        Float     @default(0)
  priceINR        Float     @default(0)
  priceEUR        Float     @default(0)
  priceAUD        Float     @default(0)
  shape           String
  carat           Float
  color           String
  clarity         String
  cut             String?
  polish          String?
  symmetry        String?
  certificateNo   String?
  lab             String?
  stock           Int       @default(0)
  images          String[]  // Media links (images or videos) - up to 5
  videoUrl        String?   // Video URL
  certificateUrl  String?   // Certificate URL
  threeSixtyView  String?   // 360 view URL
  additionalMedia String[]  // Additional media (images/videos)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  categoryId      String?
  subcategoryId   String?
  category        Category?    @relation(fields: [categoryId], references: [id])
  subcategory     Subcategory? @relation(fields: [subcategoryId], references: [id])
}

model Cart {
  id        String    @id @default(uuid())
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])
  items     Json      // store array of { productId, name, price, qty }
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id           String      @id @default(uuid())
  orderNumber  Int         @unique @default(autoincrement())
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  items        Json       // same format as cart items
  totalAmount  Float
  shippingInfo Json      // { name, email, phone, address }
  status       OrderStatus @default(PENDING)
  createdAt    DateTime    @default(now())
}

model WishlistItem {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  productName String
  productPrice Float
  productImage String
  productCategory String
  addedAt     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Prevent duplicate items per user
  @@index([userId])
  @@index([productId])
}

// -----------------
// Task and Notification models
// -----------------

model Task {
  id          String      @id @default(uuid())
  name        String
  description String
  type        TaskType
  status      TaskStatus  @default(PENDING)
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  createdBy   User        @relation("TaskCreatedBy", fields: [createdById], references: [id])
  assignments TaskAssignment[]
}

model TaskAssignment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String   // TASK, OFFER, SYSTEM, etc.
  imageUrl  String?  // Cloudinary image URL
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// -----------------
// Site Announcement
// -----------------

model SiteAnnouncement {
  id           String   @id @default(uuid())
  text         String
  buttonText   String?
  buttonUrl    String?
  isActive     Boolean  @default(true)
  createdById  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdBy    User?    @relation("SiteAnnouncementCreatedBy", fields: [createdById], references: [id])
}

// -----------------
// Category models
// -----------------

model Category {
  id            String   @id @default(uuid())
  name          String
  slug          String   @unique
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subcategories Subcategory[]
  products      Product[]
}

model Subcategory {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]

  @@index([categoryId])
}
