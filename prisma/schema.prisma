// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------
// Common Enums
// -------------

enum Role {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

// -----------------
// NextAuth.js models
// -----------------

model User {
  id             String   @id @default(uuid())
  name           String?
  email          String   @unique
  phone          String?
  password       String?
  image          String?
  role           Role     @default(CUSTOMER)
  emailVerified  DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  accounts       Account[]
  sessions       Session[]

  // Relations to created records
  createdInvoices Invoice[] @relation("InvoiceCreatedBy")
  createdMemos    Memo[]    @relation("MemoCreatedBy")
  createdLedger   Ledger[]  @relation("LedgerCreatedBy")
  createdReports  PerformanceReport[] @relation("PerformanceReportCreatedBy")
  createdMasters  Master[]  @relation("MasterCreatedBy")
  createdInventory Inventory[] @relation("InventoryCreatedBy")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -----------------
// Business models
// -----------------

model Master {
  id                 String    @id @default(uuid())
  companyName        String
  ownerName          String?
  addressLine1       String?
  addressLine2       String?
  country            String?
  state              String?
  city               String?
  postalCode         String?
  phoneNo            String?
  faxNo              String?
  email              String?
  website            String?
  paymentTerms       String?
  shippedBy          String?
  organizationType   String?
  businessType       String?
  businessRegNo      String?
  panNo              String?
  sellerPermitNo     String?
  cstTinNo           String?
  tradeBodyMembership String?
  referenceType      String?
  notes              String?
  authorizedById     String?
  accountManagerId   String?
  brokerName         String?
  partyGroup         String?
  salesExecutiveId   String?
  leadSourceId       String?
  limit              Float?
  createdById        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  references Reference[]
  invoices   Invoice[]
  memos      Memo[]
  ledger     Ledger[]
  createdBy  User?    @relation("MasterCreatedBy", fields: [createdById], references: [id])
}

model Reference {
  id           String  @id @default(uuid())
  masterId     String
  companyName  String
  contactPerson String
  contactNo    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  master Master @relation(fields: [masterId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String    @id @default(uuid())
  invoiceNumber String    @unique
  date          DateTime?
  dueDate       DateTime?
  paymentTerms  String?
  emailPdf      Boolean?  @default(false)
  masterId      String
  description   String?
  shipmentCost  Float?    @default(0)
  discount      Float?    @default(0)
  crPayment     Float?    @default(0)
  subtotal      Float?    @default(0)
  totalDue      Float?    @default(0)
  createdById   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  master   Master  @relation(fields: [masterId], references: [id], onDelete: Cascade)
  createdBy User?   @relation("InvoiceCreatedBy", fields: [createdById], references: [id])
  items    InvoiceItem[]
  ledger   Ledger[]
}

model InvoiceItem {
  id             String   @id @default(uuid())
  invoiceId      String
  description    String
  carat          Float
  color          String?
  clarity        String?
  lab            String?
  reportNo       String?
  pricePerCarat  Float
  total          Float

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Memo {
  id           String    @id @default(uuid())
  memoNumber   String    @unique
  date         DateTime?
  dueDate      DateTime?
  paymentTerms String?
  emailPdf     Boolean?  @default(false)
  masterId     String
  description  String?
  shipmentCost Float?    @default(0)
  discount     Float?    @default(0)
  crPayment    Float?    @default(0)
  subtotal     Float?    @default(0)
  totalDue     Float?    @default(0)
  createdById  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  master   Master @relation(fields: [masterId], references: [id], onDelete: Cascade)
  createdBy User?  @relation("MemoCreatedBy", fields: [createdById], references: [id])
  items    MemoItem[]
}

model MemoItem {
  id            String  @id @default(uuid())
  memoId        String
  description   String
  carat         Float
  color         String?
  clarity       String?
  lab           String?
  reportNo      String?
  pricePerCarat Float
  total         Float

  memo Memo @relation(fields: [memoId], references: [id], onDelete: Cascade)
}

model ParcelGoods {
  id          String   @id @default(uuid())
  sieveSize   Int?
  price       Float?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Inventory {
  id              String   @id @default(uuid())
  stockId         String   @unique
  heldByCompany   String?
  status          String   // AVAILABLE, HOLD, MEMO, SOLD
  shape           String
  carat           Float
  color           String
  clarity         String
  cut             String?
  polish          String
  symmetry        String
  certificateNo   String?
  lab             String
  pricePerCarat   Float
  amount          Float
  imageUrl        String?
  videoUrl        String?
  certificateUrl  String?
  measurement     String?
  location        String?
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy       User     @relation("InventoryCreatedBy", fields: [createdById], references: [id])
}

model PerformanceReport {
  id                  String   @id @default(uuid())
  date                DateTime
  totalCalls          Int
  totalEmails         Int
  requirementReceived Int
  memoNumber          String?
  invoiceNumber       String?
  notes               String?
  createdById         String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  createdBy User @relation("PerformanceReportCreatedBy", fields: [createdById], references: [id])
}

model Ledger {
  id          String   @id @default(uuid())
  date        DateTime
  type        String   // CREDIT or DEBIT
  amount      Float
  description String
  invoiceId   String?
  masterId    String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  master    Master   @relation(fields: [masterId], references: [id])
  createdBy User     @relation("LedgerCreatedBy", fields: [createdById], references: [id])
}
